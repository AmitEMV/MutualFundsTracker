@page "/"
@using MutualFundsTracker.Models
@using System.Globalization
@using MutualFundsTracker.Helpers
@inject NavigationManager navigationManager
@inject FundsService fundsService
@inject NotificationService notificationService

<h6>Hi, Amit</h6>
<hr style="margin-top:0;" />
<RadzenNotification />
<div class="row firstdiv">
    <div class="col">
        <div class="row contentcenteralign">
            <div id="totalvaluediv" class="rounded summarybox" style="display: -webkit-flex; align-items: center; -webkit-box-pack: center; justify-content: center;width:100%">
                <label style="margin-top:10px;font-size: 14px;">Total account value is <strong>@string.Format(CultureInfo.CreateSpecificCulture("en-IN"), "{0:c0}", TotalValue)</strong></label>
                <RadzenButton Text="Details" ButtonStyle="ButtonStyle.Info" Click="NavigateToPortfolioPage" aria-label="Details"
                              Style="margin-left: 20px;background: #0479cc; margin-top: 5px;" />
            </div>
        </div>
        <br />

        <div class="row" style="margin-left:0px;">
            <label style="margin-top: 10px; font-size: 17px;">Account value trend for the last 12 months</label>
        </div>
        <br />
        <div class="row contentcenteralign">
            <div class="col rounded" style="font-size: 12px; width:100%;height: auto;background-color: white;">
                <RadzenChart @ref="areaChart" Style="width: 100%; padding: 0px; margin: 0px;">
                    <RadzenAreaSeries Smooth=true Data="@PortfolioValueTrend" CategoryProperty="Date" ValueProperty="CurrentValue"
                                      Fill="#0479cc !important" Title="Current Value" StrokeWidth="0" />
                    <RadzenAreaSeries Smooth=true Data="@PortfolioValueTrend" CategoryProperty="Date" Title="Invested Amount"
                                      LineType="LineType.Dashed" ValueProperty="InvestedValue">
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis FormatString="{0:dd/MMM}">
                        <RadzenGridLines Visible="true" />
                    </RadzenCategoryAxis>
                    <RadzenValueAxis Formatter="@FormatAsINR">
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                    <RadzenLegend Visible="true" Position="Radzen.Blazor.LegendPosition.Bottom" />
                </RadzenChart>
            </div>
        </div>
        <br />

        <div class="row" style="margin-left:0px;">
            <label style="margin-top: 10px;font-size: 17px;">Top gainers for the last 12 months</label>
        </div>
        <br />
        <div class="row contentcenteralign">
            <div class="col" style="padding:0; width:100%;height: auto;">
                <RadzenGrid @ref="gainersFundsGrid" AllowFiltering="false" AllowPaging="false" AllowSorting="true" Data="@GainersFundsData"
                            TItem="FundPerformance" Responsive="false" Style="font-size: 14px;width:inherit" CellRender="@CellRender">
                    <Columns>
                        <RadzenGridColumn TextAlign="Radzen.TextAlign.Center" TItem="FundPerformance" Property="FundName" Title="Fund Name" />
                        <RadzenGridColumn TextAlign="Radzen.TextAlign.Center" TItem="FundPerformance" Property="Return" Title="Absolute Return">
                            <Template Context="data">
                                @String.Format("{0}%", data.Return)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
        </div>
        <br />

        <div class="row" style="margin-left:0px;">
            <label style="margin-top: 10px;font-size: 17px;">Top losers for the last 12 months</label>
        </div>
        <br />
        <div class="row contentcenteralign">
            <div class="col" style="padding:0; width: 100%; height: auto;">
                <RadzenGrid @ref="losersFundsGrid" AllowFiltering="false" AllowPaging="false" AllowSorting="true" Data="@LosersFundsData"
                            TItem="FundPerformance" Responsive="false" Style="font-size: 14px;width:inherit" CellRender="@CellRender">
                    <Columns>
                        <RadzenGridColumn TextAlign="Radzen.TextAlign.Center" TItem="FundPerformance" Property="FundName" Title="Fund Name" />
                        <RadzenGridColumn TextAlign="Radzen.TextAlign.Center" TItem="FundPerformance" Property="Return" Title="Absolute Return">
                            <Template Context="data">
                                @String.Format("{0}%", data.Return)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
        </div>

    </div>
</div>

@code {

    double TotalValue { get; set; }
    string SelectedFund { get; set; }
    double MinValue { get; set; }
    double Step { get; set; }
    ValueTrend[] PortfolioValueTrend;
    RadzenChart areaChart;
    RadzenGrid<FundPerformance> gainersFundsGrid;
    RadzenGrid<FundPerformance> losersFundsGrid;
    List<FundPerformance> GainersFundsData;
    List<FundPerformance> LosersFundsData;

    protected override async Task OnInitializedAsync()
    {
        await GetFundsPerformanceAsync();
        await GetTotalValueAsync();
        await GetTotalValueTrendAsync();
    }

    async Task GetTotalValueAsync()
    {
        try
        {
            TotalValue = await fundsService.GetTotalValueAsync();
        }
        catch (CustomException ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "That didn't work :(", Detail = ex.Message, Duration = 3000 });
        }
        catch (Exception)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Oops!", Detail = "App is lil unhappy, try refreshing the page once?", Duration = 3000 });
        }
    }

    async Task GetTotalValueTrendAsync()
    {
        try
        {
            PortfolioValueTrend = await fundsService.GetTotalValueTrendAsync();

            if (PortfolioValueTrend == null)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "That didn't work :(", Detail = "Couldn't get value trend, please try again", Duration = 5000 });
            }
            else
            {
                MinValue = PortfolioValueTrend[0].InvestedValue - (PortfolioValueTrend[0].InvestedValue * .1);
                Step = 2 * MinValue; // Not using this right now, leading to errors in rendering due to not having a default value
                areaChart.Reload();
            }
        }
        catch (CustomException ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "That didn't work :(", Detail = ex.Message, Duration = 5000 });
        }
        catch (Exception)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Oops!", Detail = "App is lil unhappy, try refreshing the page once?", Duration = 5000 });
        }
    }

    async Task GetFundsPerformanceAsync()
    {
        try
        {
            GainersFundsData = await fundsService.GetFundPerformanceAsync("topgainers");

            if (GainersFundsData == null)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "That didn't work :(", Detail = "Couldn't get top gainers details, please try again", Duration = 5000 });
            }
            else
            {
                await gainersFundsGrid.Reload();
            }

            LosersFundsData = await fundsService.GetFundPerformanceAsync("toplosers");
            if (LosersFundsData == null)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "That didn't work :(", Detail = "Couldn't get top losers details, please try again", Duration = 5000 });
            }
            else
            {
                await losersFundsGrid.Reload();
            }
        }
        catch (CustomException ex)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "That didn't work :(", Detail = ex.Message, Duration = 5000 });
        }
        catch (Exception)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Oops!", Detail = "App is lil unhappy, try refreshing the page once?", Duration = 5000 });
        }
    }

    string FormatAsINR(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-IN"));
    }

    void NavigateToPortfolioPage()
    {
        navigationManager.NavigateTo("/portfolio");
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

    void CellRender(CellRenderEventArgs<FundPerformance> args)
    {
        args.Attributes.Add("style", @"background-color:white;text-align:center");
    }

}
